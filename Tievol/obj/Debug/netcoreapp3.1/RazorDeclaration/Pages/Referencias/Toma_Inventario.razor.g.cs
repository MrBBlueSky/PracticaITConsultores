// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Tievol.Pages.Referencias
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Data.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Data.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Referencias/Toma_Inventario")]
    public partial class Toma_Inventario : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 141 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\Pages\Referencias\Toma_Inventario.razor"
       
    public DateTime Min = new DateTime(1990, 1, 1, 8, 15, 0);
    public DateTime Max = new DateTime(2025, 1, 1, 19, 30, 45);
    public List<Toma_inventario> LstTomaInventarios { get; set; }
    public List<Data.Entities.Producto> LstProductos { get; set; }

    public Toma_inventario SelectedTomaInventarios { get; set; }

    public List<Data.Entities.Estado> LstEstados { get; set; }

    Telerik.Blazor.Components.TelerikNumericTextBox<int> IDInt;


    public string Accion { get; set; }


    public string TituloWindow { get; set; }
    public string TituloButton { get; set; }
    public string IconButton { get; set; }

    public bool ShowWindow { get; set; } = false;

    private int CurrentValue { get; set; }
    public TelerikNotification Notification { get; set; }



    protected override async Task OnInitializedAsync()
    {
        LstTomaInventarios = await srvTomaInventarios.GetToma_inventario();
        LstProductos = await srvProductos.GetProductos();
        LstEstados = await srvEstados.GetEstados();
    }

    private void OnCancel(MouseEventArgs e)
    {
        ShowWindow = false;
        Task.Delay(500);
        StateHasChanged();

    }

    private void OnClick(string cAccion, Toma_inventario tomaInventario)
    {
        SelectedTomaInventarios = tomaInventario;


            ShowWindow = true;
            Accion = cAccion;


            if (cAccion == "Add")
            {
                SelectedTomaInventarios = new Data.Entities.Toma_inventario()
                { //Ojo piojo: agregar atributos para inicializacion
                    ID_TomaInventario = 0,
                    N_funcionario = string.Empty,
                    StockIngresado = 0,
                    StockActual = 0,
                    StockSolicitado = 0,

                    Producto = new Data.Entities.Producto()
                    {
                        ID_Producto= 0,
                        N_Producto = string.Empty,
                        Descripcion = string.Empty,
                        Observaciones = string.Empty,
                        Codigo_Barra = 0,
                        Codigo_Interno = 0,
                        Codigo_Parte = string.Empty,
                        Codigo_Proveedor = string.Empty,
                        Precio_Venta = 0,
                        Precio_Web = 0,
                        Valor_Flete = 0,
                        Valor_Compra = 0,
                        Valor_Costo = 0,
                        Valor_Margen = 0,
                        Valor_Descuento = 0,
                    },

                    Estado = new Estado()
                    {
                        ID_Estado = 0,
                        N_Estado = string.Empty

                    }
                };

                TituloWindow = "Agregar Producto";
                TituloButton = "Agregar";
                IconButton = "add";

            }
            else
            {

                SelectedTomaInventarios = tomaInventario;


                if (Accion == "Upd")
                {
                    TituloWindow = "Actualizar Producto";
                    TituloButton = "Guardar";
                    IconButton = "save";

                }

                else
                {
                    TituloWindow = "Eliminar Producto";
                    TituloButton = "Eliminar";
                    IconButton = "delete";

                }
            }


            StateHasChanged();
        
    }
    private async Task OnSave()
    {

        ShowWindow = false;
        if (Accion == "Add")
        {
            if (LstTomaInventarios.Exists(p => p.ID_TomaInventario == SelectedTomaInventarios.ID_TomaInventario))
            {
                Notification.Show(new NotificationModel()
                {
                    Text = "El producto ya se encuentra en la lista...",
                    ThemeColor = "warning",
                    CloseAfter = 0
                });
            }

            var response = await srvTomaInventarios.CreateAsync(SelectedTomaInventarios);

            if (response.IsSuccess)
            {
                LstTomaInventarios.Add(response.Result);
                Notification.Show(new NotificationModel()
                {
                    Text = "Se agrego una Toma de Inventario correctamente",
                    ThemeColor = "success",
                    ShowIcon = true
                });
            }  // TO DO: agregar mas condicionales para las validaciones
            else
            {
                if (response.Message.Contains("Se debe asignar un Estado"))
                {

                    Notification.Show(new NotificationModel()
                    {
                        Text = response.Message,
                        ThemeColor = "error",
                        CloseAfter = 0
                    });
                }
            }
        }

        if (Accion == "Upd")
        {

            var response = await srvTomaInventarios.UpdateAsync(SelectedTomaInventarios);
            if (response.IsSuccess)
            {

                LstTomaInventarios.Add(response.Result);
                var posicion = LstTomaInventarios.FindIndex(p => p.ID_TomaInventario == SelectedTomaInventarios.ID_TomaInventario);
                if (posicion == -1)
                {
                    Notification.Show(new NotificationModel()
                    {
                        Text = "Ocurrio un error inesperado",
                        ThemeColor = "error",
                        CloseAfter = 0
                    });
                }
                else
                {
                    LstTomaInventarios[posicion] = SelectedTomaInventarios;
                    Notification.Show(new NotificationModel()
                    {
                        Text = "Se Actualizo la Toma de Inventario correctamente",
                        ThemeColor = "info",
                        ShowIcon = true
                    });


                }  //ALERT: agregar las validaciones
            }
            else
            {
                if (response.Message.Contains("Debe asignarle un Producto nuevo"))
                {
                    Notification.Show(new NotificationModel()
                    {
                        Text = response.Message,
                        ThemeColor = "error",
                        CloseAfter = 0
                    });
                }
            }
        }

        if (Accion == "Del")
        {
            var response = await srvTomaInventarios.DeleteAsync(SelectedTomaInventarios);
            if (response.IsSuccess)
            {
                LstTomaInventarios = await srvTomaInventarios.GetToma_inventario();
                Notification.Show(new NotificationModel()
                {
                    Text = "Se Elimino la Toma de Inventario correctamente",
                    ThemeColor = "error",
                    ShowIcon = true
                });
            }
            else
            {
                Notification.Show(new NotificationModel()
                {
                    Text = "Ocurrio un error inesperado",
                    ThemeColor = "error",
                    CloseAfter = 0
                });

            }

        }





        LstTomaInventarios = await srvTomaInventarios.GetToma_inventario();


        StateHasChanged();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductoServices srvProductos { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TomaInventarioServices srvTomaInventarios { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EstadosServices srvEstados { get; set; }
    }
}
#pragma warning restore 1591
