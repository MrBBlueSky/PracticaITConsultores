// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Tievol.Pages.Referencias
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Telerik.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Telerik.Blazor.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Data.Entities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Data.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\_Imports.razor"
using Tievol.Services;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Referencias/Producto")]
    public partial class Producto : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 331 "C:\Users\MrBBlueSky\source\TievolPractica-dev_seba\Tievol\Pages\Referencias\Producto.razor"
       
    public List<Data.Entities.Producto> LstProductos { get; set; }
    public Data.Entities.Producto SelectedProducto { get; set; }


    public List<TipoDescuento> LstTDescuentos { get; set; }
    public List<Tipo_inventario> LstTInventario { get; set; }
    public List<Tipo_material> LstTMaterial { get; set; }
    public List<Tipo_producto> LstTProductos { get; set; }
    public List<Unidad> LstUnidades { get; set; }
    public List<Marca> LstMarcas { get; set; }
    public List<Familia> LstFamilias { get; set; }
    public List<Subfamilia> LstSubfamilias { get; set; }
    public List<Data.Entities.ClienteProveedor> LstClienteProveedor { get; set; }
    public List<Data.Entities.Estado> LstEstados { get; set; }

    Telerik.Blazor.Components.TelerikNumericTextBox<int> IDInt;

    //
    public string Accion { get; set; }

    //
    public string TituloWindow { get; set; }
    public string TituloButton { get; set; }
    public string IconButton { get; set; }

    public bool ShowWindow { get; set; } = false;

    private int CurrentValue { get; set; }
    public TelerikNotification Notification { get; set; }


    //
    protected override async Task OnInitializedAsync()
    {
        LstProductos = await srvProductos.GetProductos();

        LstTDescuentos = await srvDescuentos.GetTipoDescuento();
        LstTInventario = await srvTInventario.GetTipoInventario();
        LstTMaterial = await srvTMaterial.GetTipoMaterial();
        LstTProductos = await srvTProductos.GetTipoProductos();
        LstUnidades = await srvUnidades.GetUnidades();
        LstMarcas = await srvMarcas.GetMarca();
        LstFamilias = await srvFamilias.GetFamilias();
        LstSubfamilias = await srvSubfamilias.GetSubfamilia();
        LstClienteProveedor = await srvClientesProveedores.GetClienteProveedors();
        LstEstados = await srvEstados.GetEstados();
    }

    private void OnCancel(MouseEventArgs e)
    {
        ShowWindow = false;
        Task.Delay(5000);
        StateHasChanged();

    }

    private void OnClick(string cAccion, Data.Entities.Producto producto)
    {
        ShowWindow = true;
        Accion = cAccion;
        SelectedProducto = producto;

        if (cAccion == "Add")
        {
            SelectedProducto = new Data.Entities.Producto()
            { //TO DO: agregar todos los atributos para su inicializacion
                ID_Producto = 0,
                N_Producto = string.Empty,

                TipoDescuento = new TipoDescuento()
                {
                    ID_Tipo_Descuento = 0,
                    N_Tipo_Descuento = string.Empty
                },
                Unidad = new Unidad()
                {
                    ID_Unidad = 0,
                    N_Unidad = string.Empty
                },
                Marca = new Marca()
                {
                    ID_Marca = 0,
                    N_Marca = string.Empty
                },
                Familia = new Familia()
                {
                    ID_Familia = 0,
                    N_Familia = string.Empty
                },
                SubFamilia = new Subfamilia()
                {
                    ID_Subfamilia = 0,
                    N_Subfamilia = string.Empty
                },
                TipoProducto = new Tipo_producto()
                {
                    ID_Tipo_Producto = 0,
                    N_Tipo_Producto = string.Empty
                },
                TipoInventario = new Tipo_inventario()
                {
                    ID_Tipo_Inventario = 0,
                    N_Tipo_Inventario = string.Empty
                },
                TipoMaterial = new Tipo_material()
                {
                    ID_Tipo_Material = 0,
                    N_Tipo_Material = string.Empty
                },
                ClienteProveedor = new Data.Entities.ClienteProveedor()
                {
                    ID_Cliente_Proveedor = 0,
                    N_Cliente_Proveedor = string.Empty
                },

                Estado = new Estado()
                {
                    ID_Estado = 0,
                    N_Estado = string.Empty

                }
            };

            TituloWindow = "Agregar Producto";
            TituloButton = "Agregar";
            IconButton = "add";

        }
        else
        {

            SelectedProducto = producto;


            if (Accion == "Upd")
            {
                TituloWindow = "Actualizar Producto";
                TituloButton = "Guardar";
                IconButton = "save";

            }
            else
            {
                TituloWindow = "Eliminar Producto";
                TituloButton = "Eliminar";
                IconButton = "delete";

            }
        }


        StateHasChanged();
    }

    private async Task OnSave()
    {

        ShowWindow = false;
        if (Accion == "Add")
        {
            if (LstProductos.Exists(p => p.N_Producto == SelectedProducto.N_Producto))
            {
                Notification.Show(new NotificationModel()
                {
                    Text = "El producto ya se encuentra en la lista...",
                    ThemeColor = "warning",
                    CloseAfter = 0
                });
            }

            var response = await srvProductos.CreateAsync(SelectedProducto);

            if (response.IsSuccess)
            {
                LstProductos.Add(response.Result);
                Notification.Show(new NotificationModel()
                {
                    Text = "El Producto se ha ingresado con exito",
                    ThemeColor = "success",
                    CloseAfter = 0
                });
            }  // TO DO: agregar mas condicionales para las validaciones
            else
            {
                if (response.Message.Contains("Se debe asignar un Estado"))
                {

                    Notification.Show(new NotificationModel()
                    {
                        Text = response.Message,
                        ThemeColor = "error",
                        CloseAfter = 0
                    });
                }
            }
        }

        if (Accion == "Upd")
        {

            var response = await srvProductos.UpdateAsync(SelectedProducto);
            if (response.IsSuccess)
            {

                LstProductos.Add(response.Result);
                var posicion = LstProductos.FindIndex(p => p.ID_Producto == SelectedProducto.ID_Producto);
                if (posicion == -1)
                {
                    Notification.Show(new NotificationModel()
                    {
                        Text = "Ocurrio un error inesperado",
                        ThemeColor = "error",
                        CloseAfter = 0
                    });
                }
                else
                {
                    LstProductos[posicion] = SelectedProducto;
                    Notification.Show(new NotificationModel()
                    {
                        Text = "Se ha actualizado el Producto",
                        ThemeColor = "success",
                        CloseAfter = 0
                    });


                }  //TO DO: agregar mas condicionales para las validaciones
            }
            else
            {
                if (response.Message.Contains("Debe asignarle un estado nuevo"))
                {
                    Notification.Show(new NotificationModel()
                    {
                        Text = response.Message,
                        ThemeColor = "error",
                        CloseAfter = 0
                    });
                }
            }
        }

        if (Accion == "Del")
        {
            var response = await srvProductos.DeleteAsync(SelectedProducto);
            if (response.IsSuccess)
            {
                LstProductos = await srvProductos.GetProductos();
                Notification.Show(new NotificationModel()
                {
                    Text = "Producto eliminado",
                    ThemeColor = "success",
                    CloseAfter = 0
                });
            }
            else
            {
                Notification.Show(new NotificationModel()
                {
                    Text = "Ocurrio un error inesperado",
                    ThemeColor = "error",
                    CloseAfter = 0
                });

            }

        }

        LstProductos = await srvProductos.GetProductos();


        StateHasChanged();
    }

    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EstadosServices srvEstados { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ClienteProveedorServices srvClientesProveedores { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SubfamiliaServices srvSubfamilias { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private FamiliasServices srvFamilias { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private MarcaServices srvMarcas { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UnidadesServices srvUnidades { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TipoDescuentoServices srvDescuentos { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TipoProductosServices srvTProductos { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProductoServices srvProductos { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TipoMaterialServices srvTMaterial { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TipoInventarioServices srvTInventario { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private RegionesServices srvRegiones { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CiudadesServices srvCiudades { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EmpresasServices srvEmpresas { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PaisesServices srvPaises { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ComunasServices srvComunas { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SucursalesServices srvSucursales { get; set; }
    }
}
#pragma warning restore 1591
